{
  "results": {
    "arc_challenge": {
      "alias": "arc_challenge",
      "acc,none": 0.17747440273037543,
      "acc_stderr,none": 0.011165138769643956,
      "acc_norm,none": 0.22098976109215018,
      "acc_norm_stderr,none": 0.012124929206818258
    },
    "arc_easy": {
      "alias": "arc_easy",
      "acc,none": 0.4208754208754209,
      "acc_stderr,none": 0.010130502164066345,
      "acc_norm,none": 0.3808922558922559,
      "acc_norm_stderr,none": 0.009964428212260389
    },
    "lambada_openai": {
      "alias": "lambada_openai",
      "perplexity,none": 77.16257020674547,
      "perplexity_stderr,none": 3.2990040472539013,
      "acc,none": 0.2895400737434504,
      "acc_stderr,none": 0.006318823234213219
    },
    "logiqa": {
      "alias": "logiqa",
      "acc,none": 0.2196620583717358,
      "acc_stderr,none": 0.01623910941493394,
      "acc_norm,none": 0.27035330261136714,
      "acc_norm_stderr,none": 0.01742069478339314
    },
    "piqa": {
      "alias": "piqa",
      "acc,none": 0.5854189336235038,
      "acc_stderr,none": 0.011494326682255163,
      "acc_norm,none": 0.6022850924918389,
      "acc_norm_stderr,none": 0.011419114133117228
    },
    "sciq": {
      "alias": "sciq",
      "acc,none": 0.681,
      "acc_stderr,none": 0.014746404865473474,
      "acc_norm,none": 0.639,
      "acc_norm_stderr,none": 0.015195720118175113
    },
    "winogrande": {
      "alias": "winogrande",
      "acc,none": 0.5027624309392266,
      "acc_stderr,none": 0.014052271211616429
    }
  },
  "group_subtasks": {
    "arc_challenge": [],
    "arc_easy": [],
    "lambada_openai": [],
    "logiqa": [],
    "piqa": [],
    "sciq": [],
    "winogrande": []
  },
  "configs": {
    "arc_challenge": {
      "task": "arc_challenge",
      "tag": [
        "ai2_arc"
      ],
      "dataset_path": "allenai/ai2_arc",
      "dataset_name": "ARC-Challenge",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Question: {{question}}\nAnswer:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nAnswer:",
      "metadata": {
        "version": 1.0
      }
    },
    "arc_easy": {
      "task": "arc_easy",
      "tag": [
        "ai2_arc"
      ],
      "dataset_path": "allenai/ai2_arc",
      "dataset_name": "ARC-Easy",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "Question: {{question}}\nAnswer:",
      "doc_to_target": "{{choices.label.index(answerKey)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "Question: {{question}}\nAnswer:",
      "metadata": {
        "version": 1.0
      }
    },
    "lambada_openai": {
      "task": "lambada_openai",
      "tag": [
        "lambada"
      ],
      "dataset_path": "EleutherAI/lambada_openai",
      "dataset_name": "default",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "test_split": "test",
      "doc_to_text": "{{text.split(' ')[:-1]|join(' ')}}",
      "doc_to_target": "{{' '+text.split(' ')[-1]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "perplexity",
          "aggregation": "perplexity",
          "higher_is_better": false
        },
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "loglikelihood",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "{{text}}",
      "metadata": {
        "version": 1.0
      }
    },
    "logiqa": {
      "task": "logiqa",
      "dataset_path": "EleutherAI/logiqa",
      "dataset_name": "logiqa",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "def doc_to_text(doc) -> str:\n    \"\"\"\n    Passage: <passage>\n    Question: <question>\n    Choices:\n    A. <choice1>\n    B. <choice2>\n    C. <choice3>\n    D. <choice4>\n    Answer:\n    \"\"\"\n    choices = [\"a\", \"b\", \"c\", \"d\"]\n    prompt = \"Passage: \" + doc[\"context\"] + \"\\n\"\n    prompt += \"Question: \" + doc[\"question\"] + \"\\nChoices:\\n\"\n    for choice, option in zip(choices, doc[\"options\"]):\n        prompt += f\"{choice.upper()}. {option}\\n\"\n    prompt += \"Answer:\"\n    return prompt\n",
      "doc_to_target": "def doc_to_target(doc) -> int:\n    choices = [\"a\", \"b\", \"c\", \"d\"]\n    return choices.index(doc[\"label\"].strip())\n",
      "doc_to_choice": "{{options}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "{{context}}",
      "metadata": {
        "version": 1.0
      }
    },
    "piqa": {
      "task": "piqa",
      "dataset_path": "piqa",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Question: {{goal}}\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": "{{[sol1, sol2]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "goal",
      "metadata": {
        "version": 1.0
      }
    },
    "sciq": {
      "task": "sciq",
      "dataset_path": "sciq",
      "training_split": "train",
      "validation_split": "validation",
      "test_split": "test",
      "doc_to_text": "{{support.lstrip()}}\nQuestion: {{question}}\nAnswer:",
      "doc_to_target": 3,
      "doc_to_choice": "{{[distractor1, distractor2, distractor3, correct_answer]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "{{support}} {{question}}",
      "metadata": {
        "version": 1.0
      }
    },
    "winogrande": {
      "task": "winogrande",
      "dataset_path": "winogrande",
      "dataset_name": "winogrande_xl",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def doc_to_text(doc):\n    answer_to_num = {\"1\": 0, \"2\": 1}\n    return answer_to_num[doc[\"answer\"]]\n",
      "doc_to_target": "def doc_to_target(doc):\n    idx = doc[\"sentence\"].index(\"_\") + 1\n    return doc[\"sentence\"][idx:].strip()\n",
      "doc_to_choice": "def doc_to_choice(doc):\n    idx = doc[\"sentence\"].index(\"_\")\n    options = [doc[\"option1\"], doc[\"option2\"]]\n    return [doc[\"sentence\"][:idx] + opt for opt in options]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "sentence",
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "arc_challenge": 1.0,
    "arc_easy": 1.0,
    "lambada_openai": 1.0,
    "logiqa": 1.0,
    "piqa": 1.0,
    "sciq": 1.0,
    "winogrande": 1.0
  },
  "n-shot": {
    "arc_challenge": 0,
    "arc_easy": 0,
    "lambada_openai": 0,
    "logiqa": 0,
    "piqa": 0,
    "sciq": 0,
    "winogrande": 0
  },
  "higher_is_better": {
    "arc_challenge": {
      "acc": true,
      "acc_norm": true
    },
    "arc_easy": {
      "acc": true,
      "acc_norm": true
    },
    "lambada_openai": {
      "perplexity": false,
      "acc": true
    },
    "logiqa": {
      "acc": true,
      "acc_norm": true
    },
    "piqa": {
      "acc": true,
      "acc_norm": true
    },
    "sciq": {
      "acc": true,
      "acc_norm": true
    },
    "winogrande": {
      "acc": true
    }
  },
  "n-samples": {
    "winogrande": {
      "original": 1267,
      "effective": 1267
    },
    "sciq": {
      "original": 1000,
      "effective": 1000
    },
    "piqa": {
      "original": 1838,
      "effective": 1838
    },
    "logiqa": {
      "original": 651,
      "effective": 651
    },
    "lambada_openai": {
      "original": 5153,
      "effective": 5153
    },
    "arc_easy": {
      "original": 2376,
      "effective": 2376
    },
    "arc_challenge": {
      "original": 1172,
      "effective": 1172
    }
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=/home/ubuntu/ctx-fs1/LLM-Shearing/out/prune_pythia_general/pythia_410m__160m_2048_dclm_5b/hf_prune",
    "model_num_parameters": 162322944,
    "model_dtype": "torch.float16",
    "model_revision": "main",
    "model_sha": "",
    "batch_size": 1,
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "bcb4cbf",
  "date": 1733459379.630214,
  "pretty_env_info": "PyTorch version: 2.5.1+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.5 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: Could not collect\nCMake version: version 3.25.0\nLibc version: glibc-2.35\n\nPython version: 3.9.21 (main, Dec  5 2024, 22:03:54)  [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.8.0-49-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.4.131\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA H100 80GB HBM3\nNvidia driver version: 550.127.05\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        52 bits physical, 57 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               26\nOn-line CPU(s) list:                  0-25\nVendor ID:                            GenuineIntel\nModel name:                           Intel(R) Xeon(R) Platinum 8480+\nCPU family:                           6\nModel:                                143\nThread(s) per core:                   2\nCore(s) per socket:                   13\nSocket(s):                            1\nStepping:                             8\nBogoMIPS:                             4000.00\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq vmx ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves avx_vnni avx512_bf16 wbnoinvd arat vnmi avx512vbmi umip pku ospke waitpkg avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid bus_lock_detect cldemote movdiri movdir64b fsrm md_clear serialize tsxldtrk avx512_fp16 arch_capabilities\nVirtualization:                       VT-x\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            832 KiB (26 instances)\nL1i cache:                            832 KiB (26 instances)\nL2 cache:                             52 MiB (13 instances)\nL3 cache:                             16 MiB (1 instance)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-25\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Unknown: No mitigations\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Not affected\nVulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Enhanced / Automatic IBRS; IBPB conditional; RSB filling; PBRSB-eIBRS SW sequence; BHI SW loop, KVM SW loop\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Mitigation; TSX disabled\n\nVersions of relevant libraries:\n[pip3] numpy==2.0.2\n[pip3] torch==2.5.1\n[pip3] triton==3.1.0\n[conda] Could not collect",
  "transformers_version": "4.47.0",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "0"
  ],
  "tokenizer_eos_token": [
    "<|endoftext|>",
    "0"
  ],
  "tokenizer_bos_token": [
    "<|endoftext|>",
    "0"
  ],
  "eot_token_id": 0,
  "max_length": 2048,
  "task_hashes": {},
  "model_source": "hf",
  "model_name": "/home/ubuntu/ctx-fs1/LLM-Shearing/out/prune_pythia_general/pythia_410m__160m_2048_dclm_5b/hf_prune",
  "model_name_sanitized": "__home__ubuntu__ctx-fs1__LLM-Shearing__out__prune_pythia_general__pythia_410m__160m_2048_dclm_5b__hf_prune",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 24110.363526465,
  "end_time": 24408.098800258,
  "total_evaluation_time_seconds": "297.7352737930014"
}